// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutritionWebsite.data;

#nullable disable

namespace NutritionWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251017022126_UpdatedMIandMAddedUserMeals")]
    partial class UpdatedMIandMAddedUserMeals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NutritionWebsite.Models.DiaryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("DiaryEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "hated it",
                            Title = "Went Hiking"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "filled with hatred",
                            Title = "On a hate binge"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "wow today was nice",
                            Title = "On a love binge"
                        });
                });

            modelBuilder.Entity("NutritionWebsite.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Calcium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Chloride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Chromium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cobalt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Copper")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DietaryFibre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<decimal>("FatTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fluoride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Folate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FolicAcidEquivalents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Iodine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lead")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Manganese")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Mercury")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Moisture")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Molybdenum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NamePrimary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NiacinEquivalents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Nickle")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Selenium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sulphur")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMonounsaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPolyunsaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSaturatedFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalStarch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSugar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTransFat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminAequivalent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB5")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminB7")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Zinc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("NutritionWebsite.Models.MealIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MealId");

                    b.ToTable("MealIngredients");
                });

            modelBuilder.Entity("NutritionWebsite.Models.Meals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("NutritionWebsite.Models.UnitsConversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nutrient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsConversion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nutrient = "Energy",
                            Unit = "KiloJoules"
                        },
                        new
                        {
                            Id = 2,
                            Nutrient = "Moisture",
                            Unit = "Grams"
                        },
                        new
                        {
                            Id = 3,
                            Nutrient = "Protein",
                            Unit = "Grams"
                        },
                        new
                        {
                            Id = 4,
                            Nutrient = "Fat",
                            Unit = "Grams"
                        },
                        new
                        {
                            Id = 5,
                            Nutrient = "DietryFibre",
                            Unit = "Grams"
                        },
                        new
                        {
                            Id = 6,
                            Nutrient = "Calcium",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 7,
                            Nutrient = "Chloride",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 8,
                            Nutrient = "Copper",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 9,
                            Nutrient = "Iron",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 10,
                            Nutrient = "Magnesium",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 11,
                            Nutrient = "Manganese",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 12,
                            Nutrient = "Phosphorus",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 13,
                            Nutrient = "Potassium",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 14,
                            Nutrient = "Sodium",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 15,
                            Nutrient = "Sulphur",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 16,
                            Nutrient = "Zinc",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 17,
                            Nutrient = "VitaminB1",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 18,
                            Nutrient = "VitaminB2",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 19,
                            Nutrient = "VitaminB3",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 20,
                            Nutrient = "NiacinEquivalents",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 21,
                            Nutrient = "VitaminB5",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 22,
                            Nutrient = "VitaminB6",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 23,
                            Nutrient = "VitaminC",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 24,
                            Nutrient = "VitaminE",
                            Unit = "Milligrams"
                        },
                        new
                        {
                            Id = 25,
                            Nutrient = "ChromiumMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 26,
                            Nutrient = "CobaltMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 27,
                            Nutrient = "FluorideMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 28,
                            Nutrient = "IodineMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 29,
                            Nutrient = "LeadMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 30,
                            Nutrient = "MercuryMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 31,
                            Nutrient = "MolybdenumMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 32,
                            Nutrient = "NickleMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 33,
                            Nutrient = "SeleniumMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 34,
                            Nutrient = "TinMicrograms",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 35,
                            Nutrient = "VitaminAequivalent",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 36,
                            Nutrient = "VitaminB7",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 37,
                            Nutrient = "VitaminB12",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 38,
                            Nutrient = "Folate",
                            Unit = "Micrograms"
                        },
                        new
                        {
                            Id = 39,
                            Nutrient = "FolicAcidEquivalents",
                            Unit = "Micrograms"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutritionWebsite.Models.MealIngredients", b =>
                {
                    b.HasOne("NutritionWebsite.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutritionWebsite.Models.Meals", "Meal")
                        .WithMany("Ingredients")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("NutritionWebsite.Models.Meals", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutritionWebsite.Models.Meals", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
